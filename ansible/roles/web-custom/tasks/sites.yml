---
# Safety check on site.id
- name: "Check site id ({{ site.id }})"
  ansible.builtin.fail:
    msg: "site.id must match [-a-z0-9]+"
  when: "site.id is not defined or site.id is not regex('^[-a-z0-9]+$')"

# Set up User/Group
- name: "Set up site group ({{site.group}}, for {{ site.id }})"
  when: "site.group is defined"
  block:
    - name: "Safety check for group ({{site.group}}, for {{ site.id }})"
      ansible.builtin.fail:
        msg: "Do not use 'www-data' for the group; this will allow the user access to *all* sites, including ones owned by other users"
      when: "site.group == 'www-data'"
    - name: "Ensure group exists ({{site.group}}, for {{ site.id }})"
      become: true
      ansible.builtin.group:
        name: "{{ site.group }}"
        state: present
    - name: "Ensure web server user has access to group ({{site.group}}, for {{ site.id }})"
      become: true
      ansible.builtin.user:
        name: "www-data"
        groups: "{{ site.group }}"
        append: true
        state: present

- name: "Set up site user ({{site.user}}, for {{ site.id }})"
  when: "site.siteuser|default(false)"
  block:
    - name: "Safety check for user name ({{site.user}}, {{ site.id }})"
      ansible.builtin.fail:
        msg: "Do not use 'www-data' for the siteuser user name; if you want a dedicated user, pick a different name; if you just want to modify the permissions, don't use siteuser"
      when: "site.user == 'www-data'"
    - name: "Safety check for group"
      ansible.builtin.fail:
        msg: "Do not use 'www-data' for the group; this will allow the user access to *all* sites, including ones owned by other users"
      when: "site.group is defined and site.group == 'www-data'"
    - name: "Ensure site user group exists ({{site.user}}, for {{ site.id }})"
      become: true
      ansible.builtin.group:
        name: "{{ site.user }}"
        state: present
    - name: "Ensure site user exists ({{site.user}}, {{ site.id }})"
      become: true
      ansible.builtin.user:
        name: "{{ site.user }}"
        password: '!' # Lock account
        shell: /usr/sbin/nologin # Don't allow shell access
        home: /nonexistent # Don't create a directory in /home
        create_home: false
        group: "{{ site.user }}"
        groups: "{{ [site.user,site.group]|unique if site.group is defined else site.user }}"
        append: false # Site user should not have other groups; remove them
        state: present
    - name: "Ensure web server has access to user's group ({{site.user}}, for {{ site.id }})"
      become: true
      ansible.builtin.user:
        name: "www-data"
        groups: "{{ site.user }}"
        append: true
        state: present

# Set up directory
- name: "Create directory for site ({{ site.id }})"
  become: true
  ansible.builtin.file:
    path: "{{ site.directory if site.directory is defined and site.directory.startswith('/home/') else ['/var/www/', site.directory|default(site.id)] | path_join }}"
    state: directory
    owner: "{{ site.user | default('www-data') }}"
    group: "{{ site.group | default(site.user|default('www-data')) }}"
    mode: "{{ '2770' if site.group is defined else '2750' }}" # The '2' denotes SGID

# Certbot
- name: "Check if certs exists ({{ site.id }})"
  become: true
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ site.id }}/"
  register: certbot_cert
- name: "Create certs ({{ site.id }}) (Note: WILL NOT update list of domains (yet))"
  become: true
  ansible.builtin.shell: "certbot certonly --dns-cloudflare --dns-cloudflare-propagation-seconds 30 --dns-cloudflare-credentials /root/.secrets/certbot-cloudflare.ini -i nginx --cert-name {{ site.id }} -d {{ [site.domain]|union(site.additional_domains|default([])) | join(' -d ') }}"
  notify: reload_nginx
  when: "not certbot_cert.stat.exists"
- name: "Set permissions on certificate so web server can read ({{ site.id }})"
  become: true
  ansible.builtin.file:
    path: "/etc/letsencrypt/live/{{ site.id }}/privkey.pem"
    owner: root
    group: www-data
    mode: '0640'

# PHP-FPM Pool
- name: "Check site's PHP version is on list installed on server ({{ site.id }})"
  ansible.builtin.fail:
    msg: "The site.php_version is not in php_versions"
  when: "site.php_version is defined and site.php_version not in php_versions"
- name: "Set up PHP-FPM Pool ({{ site.id }})"
  become: true
  ansible.builtin.template:
    src: php-fpm-pool.j2
    dest: "/etc/php/{{ site.php_version | default(php_versions|first) }}/fpm/pool.d/{{ site.id }}.conf"
    owner: root
    group: www-data
    mode: '0640'
  notify: restart_fpm
  when: "site.profile in ['php','wordpress']"

# Nginx Config
- name: "Create Nginx config ({{ site.id }})"
  become: true
  ansible.builtin.template:
    src: "site-conf/{{ site.profile }}.j2"
    dest: "/etc/nginx/sites-available/{{ site.id }}"
    owner: root
    group: www-data
    mode: 0640
    validate: bash -c 'echo "events { worker_connections 4; } http { include %s; }" > /tmp/nginx.conf; sudo nginx -T -c /tmp/nginx.conf && rm -f /tmp/nginx.conf'
    # Nginx needs this hack because it needs the http{} block in its test config https://serverfault.com/a/811520
  notify: reload_nginx

# Set up database
- name: "Set up database ({{ site.id }})"
  when: "site.db_type is defined and site.db_type in ['mysql','mariadb']"
  block:
  - name: "Create database ({{site.db_name}}, for {{ site.id }})"
    become: true
    community.mysql.mysql_db:
      name: "{{ site.db_name }}"
      state: present
      check_implicit_admin: true
      login_unix_socket: /run/mysqld/mysqld.sock
  - name: "Create database user ({{site.db_user}}, for {{ site.id }})"
    become: true
    when: "site.db_type in ['mysql','mariadb']"
    community.mysql.mysql_user:
      name: "{{ site.db_user }}"
      password: "{{ site.db_pass }}"
      host: localhost
      priv: "{{ site.db_name }}.*:ALL"
      state: present
      check_implicit_admin: true
      login_unix_socket: /run/mysqld/mysqld.sock

# security.txt
- name: "Add security.txt file ({{ site.id }})"
  become: true
  ansible.builtin.template:
    src: security.txt.j2
    dest: "{{ site.directory if site.directory is defined and site.directory.startswith('/home/') else ['/var/www/', site.directory|default(site.id)] | path_join }}/security.txt"
    owner: "{{ site.user | default('www-data') }}"
    group: "{{ site.group | default(site.user|default('www-data')) }}"
    mode: '0644'
  when: "security_txt is defined"

# robots.txt
- name: "Add robots.txt file ({{ site.id }})"
  become: true
  ansible.builtin.template:
    src: "robots.txt-{{site.robots}}.j2"
    dest: "{{ site.directory if site.directory is defined and site.directory.startswith('/home/') else ['/var/www/', site.directory|default(site.id)] | path_join }}/robots.txt"
    owner: "{{ site.user | default('www-data') }}"
    group: "{{ site.group | default(site.user|default('www-data')) }}"
    mode: '0644'
  when: "site.robots is defined"

# Application-specific
- name: "Set up WordPress ({{ site.id }})"
  when: "site.profile == 'wordpress'"
  block:
  - name: "Create WordPress config ({{ site.id }})"
    become: true
    ansible.builtin.template:
      src: "wp-config.php.j2"
      dest: "{{ site.directory if site.directory is defined and site.directory.startswith('/home/') else ['/var/www/', site.directory|default(site.id)] | path_join }}/wp-config.php"
      owner: "{{ site.user }}"
      group: "{{ site.group | default(site.user|default('www-data')) }}"
      mode: 0750
  - name: "Set up WordPress system cron ({{ site.id }})"
    become: true
    ansible.builtin.cron:
      name: "Ansible: WordPress - {{ site.id }} ({{ site.name }})"
      minute: "*/5"
      job: "curl --resolve {{ site.domain }}:443:127.0.0.1 https://{{ site.domain }}/wp-cron.php"
      user: "{{ site.user }}"
      state: present
      disabled: false

# Enable/disable site
- name: "Enable site if applicable ({{ site.id }})"
  become: true
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ site.id }}"
    dest: "/etc/nginx/sites-enabled/{{ site.id }}"
    state: link
  notify: reload_nginx
  when: "site.enabled|default(false)"
- name: "Disable site if applicable ({{ site.id }})"
  become: true
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/{{ site.id }}"
    state: absent
  when: "not (site.enabled|default(false))"
