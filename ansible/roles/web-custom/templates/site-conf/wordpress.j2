# This file is managed by Ansible
# Changes will be overwritten
# Site: {{ site.id }} ({{ site.name }})
#
# See also:
# * Useful reference: https://easyengine.io/wordpress-nginx/tutorials/

upstream php {
        server unix:/var/run/php/php-fpm-{{ site.id }}.sock;
}

{% if site.additional_domains is defined %}
# WordPress doesn't like having multiple domains directly resolving to it
# To compensate, we're going to redirect additional domains to the primary WordPress domain
server {
        listen *:443 ssl http2;
        listen [::]:443 ssl http2;

        server_name {{ site.additional_domains|join(' ') }};

        #access_log /var/log/nginx/{{ site.logfileid|default(site.id) }}-access.log;
        access_log off;
        error_log /var/log/nginx/{{ site.logfileid|default(site.id) }}-error.log;

        # SSL/TLS Options
        ssl_certificate /etc/letsencrypt/live/{{ site.certid|default(site.id) }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ site.certid|default(site.id) }}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;

        # Security Headers
        server_tokens off;
        add_header Content-Security-Policy-Report-Only   "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https: blob:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https: data:; media-src 'self' https:; object-src 'none'; frame-ancestors 'self';" always;
        add_header Permissions-Policy        "browsing-topics=() interest-cohort=()" always;
        #add_header Referrer-Policy           "no-referrer-when-downgrade" always;
        #add_header Referrer-Policy           "same-origin" always;
        add_header Referrer-Policy           "{{ site.referrer_policy|default("strict-origin-when-cross-origin") }}" always;
        #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options    "nosniff" always;
        add_header X-Frame-Options           "SAMEORIGIN" always;
        add_header X-XSS-Protection          "1; mode=block" always;

{% if site.cors is defined %}
        # CORS
        add_header Access-Control-Allow-Origin "{{ site.cors }}";
{% endif %}

        return 301 https://{{ site.domain }}$request_uri;
}
{% endif %}

server {
        listen *:443 ssl http2;
        listen [::]:443 ssl http2;

        server_name {{ site.domain }};
        root {{ site.directory if site.directory.startswith('/home') else ['/var/www/', site.directory] | path_join }}/;
        index index.php index.html;

{% if cloudflared is defined and cloudflared is truthy %}
        # Trust cloudflared for client IPs
        set_real_ip_from 127.0.0.1;
        set_real_ip_from ::1;
        real_ip_header CF-Connecting-IP;
        #real_ip_header X_Forwarded-For;
{% endif %}

        access_log /var/log/nginx/{{ site.logfileid|default(site.id) }}-access.log;
        error_log /var/log/nginx/{{ site.logfileid|default(site.id) }}-error.log;

        # SSL/TLS Options
        ssl_certificate /etc/letsencrypt/live/{{ site.certid|default(site.id) }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ site.certid|default(site.id) }}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;

        # Security Headers
        server_tokens off;
        add_header Content-Security-Policy-Report-Only   "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https: blob:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https: data:; media-src 'self' https:; object-src 'none'; frame-ancestors 'self';" always;
        add_header Permissions-Policy        "browsing-topics=() interest-cohort=()" always;
        #add_header Referrer-Policy           "no-referrer-when-downgrade" always;
        add_header Referrer-Policy           "same-origin" always;
        #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options    "nosniff" always;
        add_header X-Frame-Options           "SAMEORIGIN" always;
        add_header X-XSS-Protection          "1; mode=block" always;

        # High-traffic files

        # Ignore logs for favicon and robots.txt (reduce noise)
        location = /favicon.ico {
                log_not_found off;
                #access_log off;
        }
        location = /robots.txt {
                allow all;
                log_not_found off;
                #access_log off;
        }
{% if security_txt is defined %}
        location = /.well-known/security.txt {
                try_files /security.txt =404;
        }
{% endif %}

{% if site.rewrites is defined %}
        # Rewrites

{% for rewrite in site.rewrites %}
{% if rewrite.enabled|default(True) is truthy %}
{% if rewrite.comment is defined %}
        # {{ rewrite.comment }}
{% endif %}
        rewrite {{ rewrite.pattern }} {{ rewrite.location }} {% if rewrite.permanent|default(False) is truthy%}permanent{% else %}redirect{% endif %};

{% endif %}
{% endfor %}
{% endif %}

        # Restrictions/Security
        # Don't count on these to stop all attacks; they mostly just stop dumb scripts

        # Block hidden files
        location ~ /\.(?!well-known) {
                access_log off;
                log_not_found off;
                deny all;
        }

        # Block attempting to access wp-config.php
        location = /wp-config.php {
                deny all;
        }

        # Block wp-config.txt (used during install)
        location = /wp-config.txt {
                deny all;
        }

        # Block nginx.conf (site-specific Nginx configutation; we're ignoring)
        location = /nginx.conf {
                deny all;
        }

        # Limit cron to localhost (and admin IPs if applicable)
        location = /wp-cron.php {
                allow 127.0.0.1;
                allow ::1;
{% for cidr in (site.admin_ips|default([])) + (server_ips|default([])) %}
                allow {{ cidr }};
{% endfor %}
                deny all;

                include /etc/nginx/fastcgi_params;
                fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_pass php;
        }
        
        # Return 403 forbidden for readme.(txt|html) or license.(txt|html) or example.(txt|html)
        if ($uri ~* "^.+(readme|license|example)\.(txt|html)$") {
                return 403;
        }
        
        # Deny backup extensions & log files
        location ~* ^.+\.(bak|log|old|orig|original|php#|php~|php_bak|save|swo|swp|sql)$ {
                deny all;
                access_log off;
                log_not_found off;
        }

        # Deny Updraft backups
        location ~ /wp-content/updraft/ {
                allow 127.0.0.1;
                allow ::1;
{% for cidr in site.admin_ips %}
                allow {{ cidr }};
{% endfor %}
                deny all;
        }

        # Don't allow .php files in the uploads/ folder
        location ~ /wp-content/uploads/ {
                location ~* \.php$ {
                        deny all;
                }
        }

        # Deny access to any files with a .php extension in the uploads directory
        # Works in sub-directory installs and also in multisite network
        # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
        #location ~* /(?:uploads|files)/.*\.php$ {
        #        deny all;
        #}

        # Block PHP files in uploads/ (alternative to above)
        location ~* ^/wp-content/uploads/.*.php$ {
                return 403;
        }

        # Block comment spam
        #location ~* wp-comments-posts\.php {
        #        if ($http_referer !~ ^(https://example.com) ) {
        #                return 405;
        #        }
        #}

        # Block loading includes (internal files)
        # See: https://wordpress.org/documentation/article/hardening-wordpress/#securing-wp-includes
        location ~ /wp-includes/ {
                location ^~ /wp-includes/[^/]+\.php {
                        deny all;
                }

                location /wp-includes/css/ {
                        location ~* \.php {
                                deny all;
                        }
                }

                location /wp-includes/js/tinymce/langs/ {
                        location ~* \.php {
                                deny all;
                        }
                }

                location /wp-includes/theme-compat/ {
                        deny all;
                }
        }

{% if site.admin_ips is defined or server_ips is defined %}
        # Also restrict admin if applicable
        #location = /wp-admin/admin-ajax.php {
        #        allow all;
        #}
        #location ~ /wp-admin/ {
        #        add_header Content-Security-Policy-Report-Only   "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob:; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; media-src 'self' https:; object-src 'none'; frame-ancestors 'self';" always;
{% for cidr in (site.admin_ips|default([])) + (server_ips|default([])) %}
        #        allow {{ cidr }};
{% endfor %}
        #        deny all;
        #}

        # Restrict sensitive pages to admin IPs
        location = /wp-login.php {
{% for cidr in site.admin_ips %}
                #allow {{ cidr }};
{% endfor %}
                #deny all;
                
                include /etc/nginx/fastcgi_params;
                fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_pass php;
        }

        location = /xmlrpc.php {
{% for cidr in site.admin_ips %}
                #allow {{ cidr }};
{% endfor %}
                #deny all;

                include /etc/nginx/fastcgi_params;
                fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_pass php;
        }
{% endif %}

{% if false %}
        # From Sucuri blog; could probably tweak to make a little better
        #location ~ ^/(wp-admin|wp-login\.php) {
        #        allow 1.2.3.4;
        #        deny all;
        #}

        # BEGIN DigitalOcean Nginx Config Generator
        # WordPress: allow TinyMCE
        #location = /wp-includes/js/tinymce/wp-tinymce.php {
        #       include nginxconfig.io/php_fastcgi.conf;
        #}

        # WordPress: deny wp-content, wp-includes php files
        #location ~* ^/(?:wp-content|wp-includes)/.*\.php$ {
        #       deny all;
        #}

        # WordPress: deny wp-content/uploads nasty stuff
        #location ~* ^/wp-content/uploads/.*\.(?:s?html?|php|js|swf)$ {
        #       deny all;
        #}

        # WordPress: SEO plugin
        #location ~* ^/wp-content/plugins/wordpress-seo(?:-premium)?/css/main-sitemap\.xsl$ {}

        # WordPress: deny wp-content/plugins (except earlier rules)
        #location ~ ^/wp-content/plugins {
        #       deny all;
        #}

        # WordPress: deny general stuff
        #location ~* ^/(?:xmlrpc\.php|wp-links-opml\.php|wp-config\.php|wp-config-sample\.php|readme\.html|license\.txt)$ {
        #       deny all;
        #}
        # END DigitalOcean Nginx Config Generator
{% endif %}

{% if site.wp_cache is defined %}
{% if site.wp_cache == 'w3tc-enhanced' %}
        # W3 Total Cache Nginx
        include {{ site.directory }};
{% else %}
        # WP Caching
        # Bypasses WordPress entirely (where possible) to serve pages

        set $cache_uri $request_uri;
        
        # POST requests and urls with a query string should always go to PHP
        if ($request_method = POST) {
                set $cache_uri 'null cache';
        }
        
        if ($query_string != "") {
                set $cache_uri 'null cache';
        }
        
        # Don't cache uris containing the following segments
        if ($request_uri ~* "(/wp-admin/|/xmlrpc.php|/wp-(app|cron|login|register|mail).php|wp-.*.php|/feed/|index.php|wp-comments-popup.php|wp-links-opml.php|wp-locations.php|sitemap(_index)?.xml|[a-z0-9_-]+-sitemap([0-9]+)?.xml)") {
                set $cache_uri 'null cache';
        }
        
        # Don't use the cache for logged in users or recent commenters
        if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_logged_in") {
                set $cache_uri 'null cache';
        }

        # Use cached or actual file if they exists, otherwise pass request to WordPress
{% if site.wp_cache == "wpsc" %}
        location / {
                try_files /wp-content/cache/supercache/$http_host/$cache_uri/index.html $uri $uri/ /index.php?$args ;
        }
{% elif site.wp_cache == "w3tc" %}
        location / {
                try_files /wp-content/w3tc/pgcache/$cache_uri/_index.html $uri $uri/ /index.php?$args ;
        }
{% else %}
        location / {
                try_files $uri $uri/ /index.php?$args;
        }
{% endif %}
{% endif %}
{% else %}
        location / {
                try_files $uri $uri/ /index.php?$args;
        }
{% endif %}

        location ~ \.php$ {
                try_files $uri =404;

                # Note: some guides recommend the following, however, it supposedly doesn't work with WordPress (has this changed since?)
                #fastcgi_split_path_info ^(.+?\.php)(/.*)$;
                #if (!-f $document_root$fastcgi_script_name) {
                #        return 404;
                #}

                client_max_body_size 100M;

                #fastcgi_intercept_errors on;
                include /etc/nginx/fastcgi_params;
                fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_hide_header Pragma;
                fastcgi_hide_header Server-Timing;
                fastcgi_pass php;
        }

{% if false %}
        #location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        #        expires max;
        #        log_not_found off;
        #}

        # assets, media
        #location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
        #       expires 7d;
        #}

        # svg, fonts
        #location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
        #       add_header Access-Control-Allow-Origin "*";
        #       expires    7d;
        #}

        #gzip_proxied    any;
        #gzip_types      text/plain text/css text/xml application/json text/javascript application/rss+xml application/atom+xml image/svg+xml;
{% endif %}
}
