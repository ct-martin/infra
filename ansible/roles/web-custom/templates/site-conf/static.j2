# This file is managed by Ansible
# Changes will be overwritten
# Site: {{ site.id }} ({{ site.name }})
#
# See also:
# * Useful reference: https://easyengine.io/wordpress-nginx/tutorials/

{% if site.additional_domains is defined %}
# WordPress doesn't like having multiple domains directly resolving to it
# To compensate, we're going to redirect additional domains to the primary WordPress domain
server {
        listen *:443 ssl http2;
        listen [::]:443 ssl http2;

        server_name {{ site.additional_domains|join(' ') }};

        #access_log /var/log/nginx/{{ site.logfileid|default(site.id) }}-access.log;
        access_log off;
        error_log /var/log/nginx/{{ site.logfileid|default(site.id) }}-error.log;

        # SSL/TLS Options
        ssl_certificate /etc/letsencrypt/live/{{ site.certid|default(site.id) }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ site.certid|default(site.id) }}/privkey.pem;

        # Security Headers
        server_tokens off;
        add_header Content-Security-Policy-Report-Only   "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https: blob:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https: data:; media-src 'self' https:; object-src 'none'; frame-ancestors 'self';" always;
        add_header Permissions-Policy        "browsing-topics=() interest-cohort=()" always;
        #add_header Referrer-Policy           "no-referrer-when-downgrade" always;
        #add_header Referrer-Policy           "same-origin" always;
        add_header Referrer-Policy           "{{ site.referrer_policy|default("strict-origin-when-cross-origin") }}" always;
        #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options    "nosniff" always;
        add_header X-Frame-Options           "SAMEORIGIN" always;
        add_header X-XSS-Protection          "1; mode=block" always;

{% if site.cors is defined %}
        # CORS
        add_header Access-Control-Allow-Origin "{{ site.cors }}";
{% endif %}
        include /etc/letsencrypt/options-ssl-nginx.conf;

        return 301 https://{{ site.domain }}$request_uri;
}
{% endif %}

server {
        listen *:443 ssl http2;
        listen [::]:443 ssl http2;

        server_name {{ site.domain }};
        root {{ site.directory if site.directory is defined and site.directory.startswith('/home') else ['/var/www/', site.directory|default(site.id)] | path_join }}/;
        index index.html;
        error_page 404 /404.html;

{% if cloudflared is defined and cloudflared is truthy %}
        # Trust cloudflared for client IPs
        set_real_ip_from 127.0.0.1;
        set_real_ip_from ::1;
        real_ip_header CF-Connecting-IP;
        #real_ip_header X_Forwarded-For;
{% endif %}

        access_log /var/log/nginx/{{ site.logfileid|default(site.id) }}-access.log;
        error_log /var/log/nginx/{{ site.logfileid|default(site.id) }}-error.log;

        # SSL/TLS Options
        ssl_certificate /etc/letsencrypt/live/{{ site.certid|default(site.id) }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ site.certid|default(site.id) }}/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;

        # Security Headers
        server_tokens off;
        add_header Content-Security-Policy-Report-Only   "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https: blob:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https: data:; media-src 'self' https:; object-src 'none'; frame-ancestors 'self';" always;
        add_header Permissions-Policy        "browsing-topics=() interest-cohort=()" always;
        #add_header Referrer-Policy           "no-referrer-when-downgrade" always;
        #add_header Referrer-Policy           "same-origin" always;
        add_header Referrer-Policy           "{{ site.referrer_policy|default("strict-origin-when-cross-origin") }}" always;
        #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options    "nosniff" always;
        add_header X-Frame-Options           "SAMEORIGIN" always;
        add_header X-XSS-Protection          "1; mode=block" always;

{% if site.cors is defined %}
        # CORS
        add_header Access-Control-Allow-Origin "{{ site.cors }}";
{% endif %}

        # High-traffic files

        # Ignore logs for favicon and robots.txt (reduce noise)
        location = /favicon.ico {
                log_not_found off;
                #access_log off;
        }
        location = /robots.txt {
                allow all;
                log_not_found off;
                #access_log off;
        }
{% if security_txt is defined %}
        location = /.well-known/security.txt {
                try_files /security.txt =404;
        }
{% endif %}

{% if site.rewrites is defined %}
        # Rewrites

{% for rewrite in site.rewrites %}
{% if rewrite.enabled|default(True) is truthy %}
{% if rewrite.comment is defined %}
        # {{ rewrite.comment }}
{% endif %}
        rewrite {{ rewrite.pattern }} {{ rewrite.location }} {% if rewrite.permanent|default(False) is truthy%}permanent{% else %}redirect{% endif %};

{% endif %}
{% endfor %}
{% endif %}

        # Restrictions/Security
        # Don't count on these to stop all attacks; they mostly just stop dumb scripts

        # Block hidden files
        location ~ /\.(?!well-known) {
                access_log off;
                log_not_found off;
                deny all;
        }

        # Block nginx.conf (site-specific Nginx configutation; we're ignoring)
        location = /nginx.conf {
                deny all;
        }
        
        # Return 403 forbidden for readme.(txt|html) or license.(txt|html) or example.(txt|html)
        if ($uri ~* "^.+(readme|license|example)\.(txt|html)$") {
                return 403;
        }
        
        # Deny backup extensions & log files
        location ~* ^.+\.(bak|log|old|orig|original|php#|php~|php_bak|save|swo|swp|sql)$ {
                deny all;
                access_log off;
                log_not_found off;
        }

        location / {
                try_files $uri $uri/ =404;
        }

{% if false %}
        #location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
        #        expires max;
        #        log_not_found off;
        #}

        # assets, media
        #location ~* \.(?:css(\.map)?|js(\.map)?|jpe?g|png|gif|ico|cur|heic|webp|tiff?|mp3|m4a|aac|ogg|midi?|wav|mp4|mov|webm|mpe?g|avi|ogv|flv|wmv)$ {
        #       expires 7d;
        #}

        # svg, fonts
        #location ~* \.(?:svgz?|ttf|ttc|otf|eot|woff2?)$ {
        #       add_header Access-Control-Allow-Origin "*";
        #       expires    7d;
        #}

        #gzip_proxied    any;
        #gzip_types      text/plain text/css text/xml application/json text/javascript application/rss+xml application/atom+xml image/svg+xml;
{% endif %}
}
